tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/develop/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  node_templates:
    db-pvc:
      type: tosca.nodes.MiCADO.Container.Volume
      properties:
        name: db-pvc
      interfaces:
        Kubernetes:
          configure:
            inputs:
              apiVersion: v1
              kind: PersistentVolumeClaim
              spec:
                  storageClassName: rook-block
                  accessModes:
                  - ReadWriteOnce
                  resources:
                    requests:
                      storage: 10Gi
    pv-nextcloud:
      type: tosca.nodes.MiCADO.Container.Volume
      properties:
        name: pv-nextcloud
      interfaces:
        Kubernetes:
          create:
            inputs:
              apiVersion: v1
              flexVolume:
                driver: rook.io/rook
                fsType: ceph
                options:
                  fsName: myfs 
                  clusterNamespace: rook
                  clusterName: rook
    
    nextcloud-mysql:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
         name: mysql
         env:
         - name: MYSQL_ROOT_PASSWORD
           value: admin
         - name: MYSQL_DATABASE
           value: nextcloud
         - name: MYSQL_USER
           value: nextcloud
         - name: MYSQL_PASSWORD
           value: admin 
         ports:
         - target: 3306
           clusterIP: 'None'
         - containerPort: 3306
           name: mysql
      artifacts:
       image:
         type: tosca.artifacts.Deployment.Image.Container.Docker
         file: mysql:5.6
         repository: docker_hub
      requirements:
        - volume:
            node: db-pvc
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: /var/lib/mysql
        - host:
            node: db-vm

      interfaces:
        Kubernetes:
          create:
            implementation: image
            inputs:
              strategy:
                type: Recreate
          configure:
            inputs:
              metadata:
                labels:
                  tier: mysql

    app:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      # Container runtime
      properties:
         name: app
         env:
         - name: NEXTCLOUD_ADMIN_USER
           value: nextcloud
         - name: NEXTCLOUD_ADMIN_PASSWORD
           value: admin
         - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
           value: 4G
         - name: NEXTCLOUD_MAX_FILE_UPLOADS
           value: "20"
         - name: NEXTCLOUD_TRUSTED_DOMAINS
           value: "212.46.102.129"
         - name: MYSQL_DATABASE
           value: nextcloud
         - name: MYSQL_HOST
           value: nextcloud-mysql
         - name: MYSQL_USER
           value: nextcloud
         - name: MYSQL_PASSWORD
           value: admin 
           
         resources:
           requests:
             cpu: "900m"
         ports:
         - target: 9000
           nodePort: 30011
           type: NodePort
         - containerPort: 9000
           name: app
      # Container image
      artifacts:
       image:
         type: tosca.artifacts.Deployment.Image.Container.Docker
         file: nextcloud:fpm
         repository: docker_hub
      requirements:
        - volume:
            node: pv-nextcloud
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: /var/www/html
        - host:
            node: nextcloud-vm
      # Container orchestrator (K8 Specific )
      interfaces:
        Kubernetes:
          create:
            implementation: image
            inputs:
              kind: DaemonSet
          configure:
            inputs:
              metadata:
                labels:
                  tier: app
    webproxy:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      # Container runtime
      properties:
         name: nginx
         resources:
           requests:
             cpu: "900m"
         ports:
         - target: 80
           nodePort: 30010
           type: NodePort
         - containerPort: 80
           name: nginx
      # Container image
      artifacts:
       image:
         type: tosca.artifacts.Deployment.Image.Container.Docker
         file: abdomosa/nginx:nextcloud
         repository: docker_hub
      requirements:
        - volume:
            node: pv-nextcloud
            relationship:
              type: tosca.relationships.AttachesTo
              properties: 
                location: /var/www/html
        - host:
            node: rook-vm
      # Container orchestrator (K8 Specific )
      interfaces:
        Kubernetes:
          create:
            implementation: image
            inputs:
              strategy:
                type: Recreate
          configure:
            inputs:
              metadata:
                labels:
                  tier: webproxy

    nextcloud-vm:
      type: tosca.nodes.MiCADO.Nova.Compute
      properties:
        image_id: 5975bb54-6971-4482-b498-3c0cc337499a
        flavor_name: 05333045-6002-4bae-9455-54977f3d75cf
        project_id: 3b922d11a8344b0e9484cf7d420ff22c
        network_id: ec83b045-a6aa-4c44-9648-21bc4c002fce
        key_name: abdo-public-key
        context:
          append: yes
          cloud_config: |
            runcmd:
            - apt-get install -y nfs-kernel-server nfs-common
        security_groups:
          - 55adea33-49ef-45d8-9943-c65e2c4309de
      interfaces:
        Occopus:
          create:
            inputs:
              interface_cloud: nova
              endpoint_cloud: https://api-dus.hkn.cloud:5000/v3/
      capabilities:
        host:
          properties:
            num_cpus: 2
            mem_size: 2 GB

    rook-vm:
      type: tosca.nodes.MiCADO.Nova.Compute
      properties:
        image_id: 5975bb54-6971-4482-b498-3c0cc337499a
        flavor_name: 05333045-6002-4bae-9455-54977f3d75cf
        project_id: 3b922d11a8344b0e9484cf7d420ff22c
        network_id: ec83b045-a6aa-4c44-9648-21bc4c002fce
        key_name: abdo-public-key
        context:
          append: yes
          cloud_config: |
            runcmd:
            - apt-get install -y nfs-kernel-server nfs-common
            - cp nginx.conf /etc/nginx/
        security_groups:
          - 55adea33-49ef-45d8-9943-c65e2c4309de
      interfaces:
        Occopus:
          create:
            inputs:
              interface_cloud: nova
              endpoint_cloud: https://api-dus.hkn.cloud:5000/v3/
      capabilities:
        scalable:
          properties:
            min_instances: 3
            max_instances: 4
        host:
          properties:
            num_cpus: 2
            mem_size: 2 GB

    db-vm:
      type: tosca.nodes.MiCADO.Nova.Compute
      properties:
        image_id: 5975bb54-6971-4482-b498-3c0cc337499a
        flavor_name: 05333045-6002-4bae-9455-54977f3d75cf
        project_id: 3b922d11a8344b0e9484cf7d420ff22c
        network_id: ec83b045-a6aa-4c44-9648-21bc4c002fce
        key_name: abdo-public-key
        context:
          append: yes
          cloud_config: |
            runcmd:
            - apt-get install -y nfs-kernel-server nfs-common
        security_groups:
          - 55adea33-49ef-45d8-9943-c65e2c4309de
      interfaces:
        Occopus:
          create:
            inputs:
              interface_cloud: nova
              endpoint_cloud: https://api-dus.hkn.cloud:5000/v3/
      capabilities:
        host:
          properties:
            num_cpus: 2
            mem_size: 2 GB

  outputs:
    ports:
      value: { get_attribute: [ app, port ]}

  policies:
    - scalability:
        type: tosca.policies.Scaling.MiCADO.VirtualMachine.CPU.app
        targets: [ nextcloud-vm ]
        properties:
          constants:
            NODE_NAME: 'nextcloud-vm'
            NODE_TH_MAX: '60'
            NODE_TH_MIN: '25'
          min_instances: 1
          max_instances: 3

policy_types:
  tosca.policies.Scaling.MiCADO.Container.CPU.app:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for container CPU
        default:
        - alert: service_overloaded
          expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_io_kubernetes_container_name="{{SERVICE_FULL_NAME}}"}[60s]))*100 > {{SERVICE_TH_MAX}}'
          for: 30s
        - alert: service_underloaded
          expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_io_kubernetes_container_name="{{SERVICE_FULL_NAME}}"}[60s]))*100 < {{SERVICE_TH_MIN}}'
          for: 30s
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for container CPU
        default: |
          if len(m_nodes) == m_node_count:
            if service_overloaded and m_node_count > m_container_count:
              m_container_count+=1
            if service_underloaded:
              m_container_count-=1
          else:
            print('Transient phase, skipping update of containers...')
        required: true

  tosca.policies.Scaling.MiCADO.VirtualMachine.CPU.app:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for VM CPU
        default:
        - alert: node_overloaded
          expr: '(100-(avg(rate(node_cpu{node="{{ NODE_NAME }}", mode="idle"}[60s]))*100)) > {{NODE_TH_MAX}}'
          for: 1m
        - alert: node_underloaded
          expr: '(100-(avg(rate(node_cpu{node="{{ NODE_NAME }}", mode="idle"}[60s]))*100)) < {{NODE_TH_MIN}}'
          for: 1m
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for VM CPU
        default: |
          if len(m_nodes) <= m_node_count and m_time_since_node_count_changed > 60:
            if node_overloaded:
              m_node_count+=1
            if node_underloaded:
              m_node_count-=1
          else:
            print('Transient phase, skipping update of nodes...')
        required: true